version: "3.7"
services:
  db_service:
    image: postgres:13.3
    hostname: postgres
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASS}
    ports:
      - "5432:5432"
    expose:
      - 5432
    networks:
      - main_network
    volumes:
      - pgdata:/var/lib/postgresql/
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped

  redis_service:
    image: redis:latest
    restart: always
    hostname: redis
    ports:
      - "6379:6379"
    expose:
      - 6379
    networks:
      - main_network
    volumes:
      - redisdata:/root/redis
      - redisconf:/usr/local/etc/redis/redis.conf
    environment:
      REDIS_PASSWORD: ${REDIS_PASS}
      REDIS_PORT: 6379
      REDIS_DATABASES: 16

  api_server:
    build: backend
    hostname: api
    environment:
      SERVER_ADDRESS: "0.0.0.0:8080"
      SERVER_IP: "0.0.0.0"
      SERVER_PORT: 8080
      PG_NAME: ${DB_NAME}
      PG_USER: ${DB_USER}
      PG_PASS: ${DB_PASS}
      PG_PORT: 5432
      PG_HOST: postgres
      USE_DB: "production"
      REDIS_PASSWORD: ${REDIS_PASS}
      REDIS_PORT: 6379
      REDIS_HOST: redis
      VAPID_PUBLIC: ${VAPID_PUBLIC}
      VAPID_PRIVATE: ${VAPID_PRIVATE}
      DEBUG: 0
    volumes:
      - media:/app/mediafiles
    ports:
      - "8080:8080"
    expose:
      - 8080
    networks:
      - main_network
    depends_on:
      db_service:
        condition: service_healthy
    links:
      - db_service
      - redis_service

  frontend_service:
    build: frontend
    hostname: frontend
    environment:
      API_BASE_URL: "taskstorm.tapeline.dev/api/"
      API_WS_URL: "wss://taskstorm.tapeline.dev/ws/"
    ports:
      - "3000:3000"
    expose:
      - 3000
    networks:
      - main_network
    depends_on:
      api_server:
        condition: service_started
    links:
      - api_server

  nginx_service:
    command: nginx -g "daemon off;"
    depends_on:
      - api_server
      - frontend_service
    image: nginx:alpine
    restart: on-failure
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ~/sslcert/fullchain.pem:/etc/nginx/server.crt
      - ~/sslcert/privkey.pem:/etc/nginx/server.key
    ports:
      - "443:443"
    networks:
      - main_network
    links:
      - api_server
      - frontend_service


networks:
  main_network:
    driver: bridge


volumes:
  pgdata:
  redisdata:
  redisconf:
  media:
